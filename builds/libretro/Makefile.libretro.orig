DEBUG=0
HAVE_LIBSNDFILE=0
HAVE_TREMOR=1
WANT_FASTWAV=1
WANT_WILDMIDI=1
WANT_LIBSAMPLERATE=1

ifeq ($(platform),)
	platform = unix
	ifeq ($(shell uname -a),)
		platform = win
	else ifneq ($(findstring MINGW,$(shell uname -a)),)
		platform = win
	else ifneq ($(findstring Darwin,$(shell uname -a)),)
		platform = osx
	else ifneq ($(findstring win,$(shell uname -a)),)
		platform = win
	endif
endif

TARGET_NAME := easyrpg
CORE_DIR    := ../..

# Version information from git
GIT_VERSION := " $(shell git rev-parse --short HEAD || echo unknown)"
ifneq ($(GIT_VERSION)," unknown")
   COMMON_DEFINES += -DGIT_VERSION=\"$(GIT_VERSION)\"
endif

# Unix
ifeq ($(platform), unix)
	TARGET := $(TARGET_NAME)_libretro.so
	fpic := -fPIC
	SHARED := -shared -Wl,--no-undefined -Wl,--version-script=$(CORE_DIR)/builds/libretro/link.T
	LIBS += -lpthread

# Haiku
ifneq (,$(findstring Haiku,$(shell uname -s)))
	LDFLAGS += -liconv
endif

# OS X
else ifeq ($(platform), osx)
	TARGET := $(TARGET_NAME)_libretro.dylib
	fpic := -fPIC
	SHARED := -dynamiclib
	ifndef ($(NOUNIVERSAL))
		CFLAGS += $(ARCHFLAGS)
		CXXFLAGS += $(ARCHFLAGS)
		LDFLAGS += $(ARCHFLAGS)
	endif
        LDFLAGS += -liconv

# iOS
else ifneq (,$(findstring ios,$(platform)))
	TARGET := $(TARGET_NAME)_libretro_ios.dylib

	ifeq ($(IOSSDK),)
		IOSSDK := $(shell xcodebuild -version -sdk iphoneos Path)
	endif
ifeq ($(platform),ios-arm64)
	CC = cc -arch arm64 -isysroot $(IOSSDK)
	CXX = clang++ -arch arm64 -isysroot $(IOSSDK)
else
	CC = clang -arch armv7 -isysroot $(IOSSDK)
	CXX = clang++ -arch armv7 -isysroot $(IOSSDK)
endif
	CXXFLAGS = -DUSE_POSIX_MEMALIGN -D__RETRO_ARM__
	fpic := -fPIC
	SHARED := -dynamiclib
ifeq ($(platform),$(filter $(platform),ios9 ios-arm64))
CC       += -miphoneos-version-min=8.0
CXX      += -miphoneos-version-min=8.0
CFLAGS   += -miphoneos-version-min=8.0
CXXFLAGS += -miphoneos-version-min=8.0
else
CC       += -miphoneos-version-min=7.0
CXX      += -miphoneos-version-min=7.0
CFLAGS   += -miphoneos-version-min=7.0
CXXFLAGS += -miphoneos-version-min=7.0
endif
        LDFLAGS += -liconv

# Theos iOS
else ifeq ($(platform), theos_ios)
	DEPLOYMENT_IOSVERSION = 7.0
	TARGET = iphone:latest:$(DEPLOYMENT_IOSVERSION)
	ARCHS = armv7 armv7s
	TARGET_IPHONEOS_DEPLOYMENT_VERSION=$(DEPLOYMENT_IOSVERSION)
	THEOS_BUILD_DIR := objs
	include $(THEOS)/makefiles/common.mk

	LIBRARY_NAME = $(TARGET_NAME)_libretro_ios

	COMMON_DEFINES = -DUSE_POSIX_MEMALIGN -D__RETRO_ARM__

# QNX
else ifneq (,$(findstring qnx,$(platform)))
	TARGET := $(TARGET_NAME)_libretro_$(platform).so

	fpic := -fPIC
	SHARED := -shared -Wl,--version-script=$(CORE_DIR)/builds/libretro/link.T
	CC = qcc -Vgcc_ntoarmv7le
	CXX = QCC -Vgcc_ntoarmv7le_cpp
	AR = QCC -Vgcc_ntoarmv7le


# PS3
else ifeq ($(platform), ps3)
	TARGET := $(TARGET_NAME)_libretro_$(platform).a
	CC = $(CELL_SDK)/host-win32/ppu/bin/ppu-lv2-gcc.exe
	CXX = $(CELL_SDK)/host-win32/ppu/bin/ppu-lv2-g++.exe
	AR = $(CELL_SDK)/host-win32/ppu/bin/ppu-lv2-ar.exe
	CXXFLAGS += -D__ppc__ -D__CELLOS_LV2__
	STATIC_LINKING = 1

# sncps3
else ifeq ($(platform), sncps3)
	TARGET := $(TARGET_NAME)_libretro_ps3.a
	CC = $(CELL_SDK)/host-win32/sn/bin/ps3ppusnc.exe
	CXX = $(CELL_SDK)/host-win32/sn/bin/ps3ppusnc.exe
	AR = $(CELL_SDK)/host-win32/sn/bin/ps3snarl.exe
	CXXFLAGS += -D__ppc__-D__CELLOS_LV2__
	STATIC_LINKING = 1

# Lightweight PS3 Homebrew SDK
else ifeq ($(platform), psl1ght)
	TARGET := $(TARGET_NAME)_libretro_$(platform).a
	CC = $(PS3DEV)/ppu/bin/ppu-gcc$(EXE_EXT)
	CXX = $(PS3DEV)/ppu/bin/ppu-g++$(EXE_EXT)
	AR = $(PS3DEV)/ppu/bin/ppu-ar$(EXE_EXT)
	CXXFLAGS += -D__ppc__ -D__CELLOS_LV2__
	STATIC_LINKING = 1

# PSP
else ifeq ($(platform), psp1)
	TARGET := $(TARGET_NAME)_libretro_$(platform).a
	CC = psp-gcc$(EXE_EXT)
	CXX = psp-g++$(EXE_EXT)
	AR = psp-ar$(EXE_EXT)
	CXXFLAGS += -DPSP -G0
	STATIC_LINKING = 1

# Vita
else ifeq ($(platform), vita)
	TARGET := $(TARGET_NAME)_libretro_$(platform).a
	CC = arm-vita-eabi-gcc$(EXE_EXT)
	CXX = arm-vita-eabi-g++$(EXE_EXT)
	AR = arm-vita-eabi-ar$(EXE_EXT)
	CXXFLAGS += -DVITA
	CFLAGS   += -DVITA
	STATIC_LINKING = 1

# Xbox 360
else ifeq ($(platform), xenon)
	TARGET := $(TARGET_NAME)_libretro_xenon360.a
	CC = xenon-gcc$(EXE_EXT)
	CXX = xenon-g++$(EXE_EXT)
	AR = xenon-ar$(EXE_EXT)
	CXXFLAGS += -D__LIBXENON__ -m32 -D__ppc__
	STATIC_LINKING = 1

# Nintendo Wii
else ifeq ($(platform), wii)
	TARGET := $(TARGET_NAME)_libretro_$(platform).a
	CC = $(DEVKITPPC)/bin/powerpc-eabi-gcc$(EXE_EXT)
	CXX = $(DEVKITPPC)/bin/powerpc-eabi-g++$(EXE_EXT)
	AR = $(DEVKITPPC)/bin/powerpc-eabi-ar$(EXE_EXT)
	CFLAGS += -DGEKKO -mrvl -mcpu=750 -meabi -mhard-float -D__ppc__
	STATIC_LINKING = 1

# Android
else ifeq ($(platform), android)
	TARGET := $(TARGET_NAME)_libretro_android.so
	CC = arm-linux-androideabi-gcc$(EXE_EXT)
	CXX = arm-linux-androideabi-g++$(EXE_EXT)
	CXXFLAGS += -D__RETRO_ARM__
	fpic := -fPIC
	SHARED := -shared -Wl,--version-script=$(CORE_DIR)/builds/libretro/link.T

	ifeq ($(RETRO_PROFILE),1)
		LDFLAGS += -llog
	endif

# ARM
else ifneq (,$(findstring armv,$(platform)))
	CXXFLAGS += -DUSE_POSIX_MEMALIGN -D__RETRO_ARM__
	TARGET := $(TARGET_NAME)_libretro.so
	SHARED := -shared -Wl,--no-undefined -Wl,--version-script=$(CORE_DIR)/builds/libretro/link.T
	LIBS += -lpthread
	fpic := -fPIC
	ifneq (,$(findstring clang,$(platform)))
		CC = clang
		CXX = clang++
		AR = clang
	endif
	ifneq (,$(findstring cortexa5,$(platform)))
		CXXFLAGS += -marm -mcpu=cortex-a5
	else ifneq (,$(findstring cortexa8,$(platform)))
		CXXFLAGS += -marm -mcpu=cortex-a8
	else ifneq (,$(findstring cortexa9,$(platform)))
		CXXFLAGS += -marm -mcpu=cortex-a9
	else ifneq (,$(findstring cortexa15a7,$(platform)))
		CXXFLAGS += -marm -mcpu=cortex-a15.cortex-a7
	else
		CXXFLAGS += -marm
	endif
	ifneq (,$(findstring softfloat,$(platform)))
		CXXFLAGS += -mfloat-abi=softfp
	else ifneq (,$(findstring hardfloat,$(platform)))
		CXXFLAGS += -mfloat-abi=hard
	endif
	CXXFLAGS += -DARM

# Emscripten
else ifeq ($(platform), emscripten)
	TARGET := $(TARGET_NAME)_libretro_$(platform).bc
	STATIC_LINKING = 1

# Windows
else
	TARGET := $(TARGET_NAME)_libretro.dll
	CC = gcc
	CXX = g++
	SHARED := -shared -static-libgcc -static-libstdc++ -Wl,--version-script=$(CORE_DIR)/builds/libretro/link.T
	ifeq ($(DEBUG), 0)
		SHARED += -s
	endif
	HAVE_DIRENT_WIN = 1
	WANT_LIBICONV = 1
	CXXFLAGS += -DUNICODE -D_UNICODE -DWILDMIDI_STATIC=1
endif

include $(CORE_DIR)/builds/libretro/Makefile.common

ifeq ($(DEBUG), 1)
	CXXFLAGS += -g -O0
else
	CXXFLAGS += -DNDEBUG -O3
endif

ifeq ($(RETRO_PROFILE),1)
	CXXFLAGS += -DRETRO_PROFILE=1
endif

OBJECTS		= $(SOURCES_CXX:.cpp=.o) $(SOURCES_C:.c=.o)
COMMON_DEFINES += -DSUPPORT_AUDIO
CXXFLAGS       += -std=c++11 -D__LIBRETRO__ -fpermissive $(fpic) $(INCDIR) -DUSE_LIBRETRO $(COMMON_DEFINES)
CFLAGS	       += -std=gnu99 -D__LIBRETRO__ $(fpic) $(INCDIR) -DUSE_LIBRETRO $(COMMON_DEFINES)

ifeq ($(platform), theos_ios)
COMMON_FLAGS := -DIOS -DARM $(COMMON_DEFINES) $(INCFLAGS) -I$(THEOS_INCLUDE_PATH) -Wno-error
$(LIBRARY_NAME)_CFLAGS += $(CFLAGS) $(COMMON_FLAGS)
$(LIBRARY_NAME)_CXXFLAGS += $(CXXFLAGS) $(COMMON_FLAGS)
${LIBRARY_NAME}_FILES = $(SOURCES_CXX) $(SOURCES_C)
include $(THEOS_MAKE_PATH)/library.mk
else
all: $(TARGET)
$(TARGET): $(OBJECTS)
ifeq ($(STATIC_LINKING), 1)
	$(AR) rcs $@ $(OBJECTS)
else
	$(CXX) $(LDFLAGS) $(fpic) $(SHARED) -o $@ $(OBJECTS) $(LIBS)
endif

clean:
	rm -f $(OBJECTS) $(TARGET)

.PHONY: clean
endif


{% include "copyright.tmpl" %}
// Headers
#include "{{ type }}_reader.h"
#include "{{ type }}_chunks.h"
#include "reader_struct_impl.h"

// Read {{ struct_name }}.
{%- set LCF_CHUNK_SUFFIX = type|upper + "_Reader" %}
{%- set LCF_CURRENT_STRUCT = struct_name %}

template <>
char const* const Struct<RPG::{{ LCF_CURRENT_STRUCT }}>::name = "{{ LCF_CURRENT_STRUCT }}";

template <>
Field<RPG::{{ LCF_CURRENT_STRUCT }}> const* Struct<RPG::{{ LCF_CURRENT_STRUCT }}>::fields[] = {
{%- for field in fields[struct_base]|field_is_written|list + fields[struct_name]|field_is_written|list %}
	{%- if field|lcf_type in ["Typed", "DatabaseVersion"] %}
	new {{ field|lcf_type }}Field<RPG::{{ LCF_CURRENT_STRUCT }}, {{ field.type|cpp_type }}>(
		&RPG::{{ LCF_CURRENT_STRUCT }}::{{ field.name }},
		{{ LCF_CHUNK_SUFFIX }}::Chunk{{ LCF_CURRENT_STRUCT }}::{{ field.name }},
		"{{ field.name }}",
		{{field.presentifdefault}},
		{{field.is2k3}}
	),
	{%- elif field|lcf_type in ["Empty"] %}
	new {{ field|lcf_type }}Field<RPG::{{ LCF_CURRENT_STRUCT }}>(
		{{ LCF_CHUNK_SUFFIX }}::Chunk{{ LCF_CURRENT_STRUCT }}::{{ field.name }},
		"{{ field.name }}",
		{{field.presentifdefault}},
		{{field.is2k3}}
	),
	{%- elif field|lcf_type in ["Size", "Count"] %}
	new {{ field|lcf_type }}Field<RPG::{{ LCF_CURRENT_STRUCT }}, {{ field.type|cpp_type }}>(
		&RPG::{{ LCF_CURRENT_STRUCT }}::{{ field.name }},
		{{ LCF_CHUNK_SUFFIX }}::Chunk{{ LCF_CURRENT_STRUCT }}::{{ field.name }}_size,
		{{field.presentifdefault}},
		{{field.is2k3}}
	),
	{%- endif %}
{%- endfor %}
	NULL
};

template class Struct<RPG::{{ LCF_CURRENT_STRUCT }}>;

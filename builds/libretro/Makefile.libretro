# Important when you want to add new platforms here:
# When you are crosscompiling and the target platform is not unix you must set
# RETRO_CROSSCOMPILING=1 and set RETRO_TARGET_HOST to the platform triplet.
# When you use gcc the triplet is usually the filename before "-gcc".
# Requires a C++11 capable compiler (gcc 4.8 or newer).

RETRO_CROSSCOMPILING=0
RETRO_DEPFLAGS=0

# Don't set this to 1 unless the default CMake build doesn't work.
# The static Makefile has the risk of going out of sync and breaking.
STATIC_MAKEFILE=0

ifeq ($(COMPILER_CORE_COUNT),)
	COMPILER_CORE_COUNT=4
endif

ifeq ($(platform),)
	platform = unix
	ifeq ($(shell uname -a),)
		platform = win
	else ifneq ($(findstring MINGW,$(shell uname -a)),)
		platform = win
	else ifneq ($(findstring Darwin,$(shell uname -a)),)
		platform = osx
	else ifneq ($(findstring win,$(shell uname -a)),)
		platform = win
	endif
endif

TARGET_NAME := easyrpg
CORE_DIR    := $(PWD)/../..
CMAKE       = cmake

# Version information from git
GIT_VERSION := $(shell git rev-parse --short HEAD || echo unknown)
ifneq ($(GIT_VERSION),unknown)
	COMMON_DEFINES_GIT += -DGIT_VERSION=$(GIT_VERSION)
endif

# Unix
ifeq ($(platform), unix)
	TARGET := $(TARGET_NAME)_libretro.so
	fpic := -fPIC
	LDFLAGS := -Wl,--no-undefined
	LIBS += -lpthread

ifeq ($(CC), cc)
else
ifeq ($(CC), gcc)
else
ifeq ($(CC), clang)
else
	RETRO_CROSSCOMPILING = 1
	RETRO_TARGET_HOST = $(subst -gcc,,$(CC))
	LDFLAGS += -static-libgcc -static-libstdc++
endif
endif
endif

# Haiku
ifneq (,$(findstring Haiku,$(shell uname -s)))
	LDFLAGS += -liconv
endif

# OS X
else ifeq ($(platform), osx)
	TARGET := $(TARGET_NAME)_libretro.dylib
	fpic := -fPIC
	ifndef ($(NOUNIVERSAL))
		CFLAGS += $(ARCHFLAGS)
		CXXFLAGS += $(ARCHFLAGS)
		LDFLAGS += $(ARCHFLAGS)
	endif
	LDFLAGS += -liconv

# iOS
else ifneq (,$(findstring ios,$(platform)))
	TARGET := $(TARGET_NAME)_libretro_ios.dylib
	RETRO_CROSSCOMPILING = 1
	RETRO_TARGET_HOST = arm-apple-darwin

	ifeq ($(IOSSDK),)
		IOSSDK := $(shell xcodebuild -version -sdk iphoneos Path)
	endif
ifeq ($(platform),ios-arm64)
	CC = cc -arch arm64 -isysroot $(IOSSDK)
	CXX = clang++ -arch arm64 -isysroot $(IOSSDK)
else
	CC = clang -arch armv7 -isysroot $(IOSSDK)
	CXX = clang++ -arch armv7 -isysroot $(IOSSDK)
endif
	CXXFLAGS = -DUSE_POSIX_MEMALIGN -D__RETRO_ARM__
	fpic := -fPIC
ifeq ($(platform),$(filter $(platform),ios9 ios-arm64))
CC       += -miphoneos-version-min=8.0
CXX      += -miphoneos-version-min=8.0
CFLAGS   += -miphoneos-version-min=8.0
CXXFLAGS += -miphoneos-version-min=8.0
else
CC       += -miphoneos-version-min=7.0
CXX      += -miphoneos-version-min=7.0
CFLAGS   += -miphoneos-version-min=7.0
CXXFLAGS += -miphoneos-version-min=7.0
endif

# Android
else ifeq ($(platform), android)
	TARGET := $(TARGET_NAME)_libretro_android.so
	CC = arm-linux-androideabi-gcc$(EXE_EXT)
	CXX = arm-linux-androideabi-g++$(EXE_EXT)
	CXXFLAGS += -D__RETRO_ARM__
	fpic := -fPIC

	ifeq ($(RETRO_PROFILE),1)
		LDFLAGS += -llog
	endif

	RETRO_CROSSCOMPILING = 1
	RETRO_TARGET_HOST = arm-linux-androideabi

# Classic Platforms ####################
# Platform affix = classic_<ISA>_<ÂµARCH>
# Help at https://modmyclassic.com/comp
# (armv7 a7, hard point, neon based) ###
# NESC, SNESC, C64 mini
else ifeq ($(platform), classic_armv7_a7)
	TARGET := $(TARGET_NAME)_libretro.so
	fpic := -fPIC
	COMMON_DEFINES += -Ofast \
	-fdata-sections -ffunction-sections -Wl,--gc-sections \
	-fno-stack-protector -fno-ident -fomit-frame-pointer \
	-falign-functions=1 -falign-jumps=1 -falign-loops=1 \
	-fno-unwind-tables -fno-asynchronous-unwind-tables -fno-unroll-loops \
	-fmerge-all-constants -fno-math-errno \
	-marm -mtune=cortex-a7 -mfpu=neon-vfpv4 -mfloat-abi=hard
	RETRO_DEPFLAGS = -Ofast \
	-fno-stack-protector -fno-ident -fomit-frame-pointer \
	-falign-functions=1 -falign-jumps=1 -falign-loops=1 \
	-fno-unwind-tables -fno-asynchronous-unwind-tables -fno-unroll-loops \
	-fmerge-all-constants -fno-math-errno \
	-marm -mtune=cortex-a7 -mfpu=neon-vfpv4 -mfloat-abi=hard
	LDFLAGS += -marm -mtune=cortex-a7 -mfpu=neon-vfpv4 -mfloat-abi=hard
	HAVE_NEON = 1
	ARCH = arm
	LIBS += -lpthread
	COMMON_DEFINES += -DUSE_POSIX_MEMALIGN -D__RETRO_ARM__ -DARM
	RETRO_CROSSCOMPILING = 1
	RETRO_TARGET_HOST = arm-linux-gnueabihf
	ifeq ($(shell echo `$(CC) -dumpversion` "< 4.9" | bc -l), 1)
	  COMMON_DEFINES += -march=armv7-a
	else
	  COMMON_DEFINES += -march=armv7ve
	  # If gcc is 5.0 or later
	  ifeq ($(shell echo `$(CC) -dumpversion` ">= 5" | bc -l), 1)
	    LDFLAGS += -static-libgcc -static-libstdc++
	  endif
	endif

# ARM
else ifneq (,$(findstring armv,$(platform)))
	CXXFLAGS += -DUSE_POSIX_MEMALIGN -D__RETRO_ARM__
	TARGET := $(TARGET_NAME)_libretro.so
	LDFLAGS += -Wl,--no-undefined
	LIBS += -lpthread
	fpic := -fPIC
	ifneq (,$(findstring clang,$(platform)))
		CC = clang
		CXX = clang++
		AR = clang
	endif
	ifneq (,$(findstring cortexa5,$(platform)))
		CXXFLAGS += -marm -mcpu=cortex-a5
	else ifneq (,$(findstring cortexa8,$(platform)))
		CXXFLAGS += -marm -mcpu=cortex-a8
	else ifneq (,$(findstring cortexa9,$(platform)))
		CXXFLAGS += -marm -mcpu=cortex-a9
	else ifneq (,$(findstring cortexa15a7,$(platform)))
		CXXFLAGS += -marm -mcpu=cortex-a15.cortex-a7
	else
		CXXFLAGS += -marm
	endif
	ifneq (,$(findstring softfloat,$(platform)))
		CXXFLAGS += -mfloat-abi=softfp
	else ifneq (,$(findstring hardfloat,$(platform)))
		CXXFLAGS += -mfloat-abi=hard
	endif
	CXXFLAGS += -DARM

# Nintendo Switch (libnx)
else ifeq ($(platform), libnx)
	include $(DEVKITPRO)/libnx/switch_rules
	TARGET := $(TARGET_NAME)_libretro_$(platform).a
	DEFINES := -DSWITCH=1 -D__SWITCH__ -DARM -DHAVE_LIBNX
	COMMON_DEFINES += -fPIC -I$(LIBNX)/include/ -ffunction-sections -fdata-sections -ftls-model=local-exec
	COMMON_DEFINES += -march=armv8-a -mtune=cortex-a57 -mtp=soft -mcpu=cortex-a57+crc+fp+simd -ffast-math $(DEFINES)
	CFLAGS += -Dpthread_t=Thread -Dpthread_mutex_t=Mutex -Dpthread_mutexattr_t='void*' -Dpthread_attr_t=int $(DEFINES)
	CFLAGS += -Dpthread_cond_t=CondVar -Dpthread_condattr_t='int' -D_SYS__PTHREADTYPES_H_ -include $(LIBNX)/include/switch.h
	CXXFLAGS += $(CFLAGS)
	RETRO_DEPFLAGS = $(COMMON_DEFINES)
	STATIC_LINKING = 1
	RETRO_CROSSCOMPILING = 1
	RETRO_TARGET_HOST = aarch64-none-elf
	CC = $(RETRO_TARGET_HOST)-gcc
	CXX = $(RETRO_TARGET_HOST)-g++
	CMAKE_EXTRA_ARGS = -DCMAKE_TOOLCHAIN_FILE=Generic.toolchain
	ICU_VERSION = 59

# Vita
else ifeq ($(platform), vita)
	TARGET := $(TARGET_NAME)_libretro_$(platform).a
	CC = arm-vita-eabi-gcc$(EXE_EXT)
	CXX = arm-vita-eabi-g++$(EXE_EXT)
	AR = arm-vita-eabi-ar$(EXE_EXT)
	__FLAGS := -marm -mfpu=neon -mtune=cortex-a9 -mcpu=cortex-a9 -mfloat-abi=hard -mword-relocations
	__FLAGS += -fno-optimize-sibling-calls -fno-strict-aliasing -fno-partial-inlining -fno-tree-vrp
	__FLAGS += -ffast-math -fsingle-precision-constant -funroll-loops -ftracer -DVITA -DPSP2
	RETRO_DEPFLAGS = $(__FLAGS)
	CFLAGS += $(__FLAGS)
	CXXFLAGS += $(__FLAGS)
	COMMON_DEFINES += -fno-exceptions -fno-rtti
	STATIC_LINKING = 1
	RETRO_CROSSCOMPILING = 1
	RETRO_TARGET_HOST = arm-vita-eabi
	CMAKE_EXTRA_ARGS = -DCMAKE_TOOLCHAIN_FILE=Generic.toolchain
	ICU_VERSION = 59

# Windows
else
	TARGET := $(TARGET_NAME)_libretro.dll
	CC = gcc
	CXX = g++
	CMAKE = /usr/bin/cmake
	CFLAGS += -DUNICODE -D_UNICODE -DWILDMIDI_STATIC
	CXXFLAGS += $(CFLAGS)
	LDFLAGS += -lShlwapi -static-libgcc -static-libstdc++
	SHARED := -shared
	ifeq ($(DEBUG), 0)
		SHARED += -s
	endif
	CMAKE_EXTRA_ARGS = -DWIN32=1
	# CMake on the buildbot fails to find liblcf...
	STATIC_MAKEFILE = 1
endif

ifeq ($(DEBUG), 1)
	CXXFLAGS += -g -O0
else
	CXXFLAGS += -DNDEBUG -O3
endif

ifeq ($(RETRO_PROFILE),1)
	CXXFLAGS += -DRETRO_PROFILE=1
endif

# RETRO_DEPFLAGS are used for compiler flags specificly for dependencies and seperated
# away from the Libretro target compiler flags.
ifneq ($(RETRO_DEPFLAGS), 0)
	DEPCXXFLAGS    += -D__LIBRETRO__ -fpermissive $(fpic) $(INCDIR) $(RETRO_DEPFLAGS)
	DEPCFLAGS      += -D__LIBRETRO__ $(fpic) $(INCDIR) $(RETRO_DEPFLAGS)
	CXXFLAGS       += -D__LIBRETRO__ -fpermissive $(fpic) $(INCDIR) $(COMMON_DEFINES)
	CFLAGS	       += -D__LIBRETRO__ $(fpic) $(INCDIR) $(COMMON_DEFINES)
else
	CXXFLAGS       += -D__LIBRETRO__ -fpermissive $(fpic) $(INCDIR) $(COMMON_DEFINES)
	CFLAGS	       += -D__LIBRETRO__ $(fpic) $(INCDIR) $(COMMON_DEFINES)
endif

ifeq ($(STATIC_LINKING), 1)
	BUILD_SHARED_LIBS = OFF
else
	BUILD_SHARED_LIBS = ON
endif

ifeq ($(RETRO_CROSSCOMPILING), 1)
	BUILD_TOOLCHAIN_CMD = ./2_build_cross_toolchain.sh
else
	BUILD_TOOLCHAIN_CMD = ./2_build_toolchain.sh
endif

ifneq ($(RETRO_DEPFLAGS), 0)
else
	DEPCFLAGS := $(CFLAGS)
	DEPCXXFLAGS := $(CXXFLAGS)
endif

CFLAGS   += $(COMMON_DEFINES_GIT) -DWANT_FASTWAV
CXXFLAGS += $(COMMON_DEFINES_GIT) -DWANT_FASTWAV -std=c++11

ifeq ($(STATIC_MAKEFILE), 1)
include Makefile.static
OBJECTS	= $(SOURCES_CXX:.cpp=.o) $(SOURCES_C:.c=.o)
endif

all: $(TARGET)

easyrpg_libs:
	@echo "** BUILDING $(TARGET) FOR PLATFORM $(platform) **"

	cd $(CORE_DIR)/builds/libretro/deps/libretro; \
	RETRO_CC="$(CC)" RETRO_CXX="$(CXX)" \
	RETRO_CFLAGS="$(DEPCFLAGS)" RETRO_CXXFLAGS="$(DEPCXXFLAGS)" \
	RETRO_LDFLAGS="$(LDFLAGS)" RETRO_TARGET_HOST="$(RETRO_TARGET_HOST)" \
	ICU_VERSION="$(ICU_VERSION)" \
	$(BUILD_TOOLCHAIN_CMD)
	touch easyrpg_libs

$(OBJECTS): easyrpg_libs

$(TARGET): $(OBJECTS) easyrpg_libs
ifeq ($(STATIC_MAKEFILE), 0)
	cd $(CORE_DIR)/builds/libretro;\
	CC="$(CC)" CXX="$(CXX)" CFLAGS="$(CFLAGS)" CXXFLAGS="$(CXXFLAGS)" LDFLAGS="$(LDFLAGS)" \
		$(CMAKE) $(CORE_DIR) -DPLAYER_TARGET_PLATFORM=libretro \
		-DBUILD_SHARED_LIBS=$(BUILD_SHARED_LIBS) -DCMAKE_FIND_ROOT_PATH=$(CORE_DIR)/builds/libretro/deps/libretro \
		-DPLAYER_ENABLE_TESTS=OFF -DPLAYER_WITH_XMP=OFF \
		-DCMAKE_FIND_ROOT_PATH_MODE_LIBRARY=ONLY -DCMAKE_FIND_ROOT_PATH_MODE_INCLUDE=ONLY $(CMAKE_EXTRA_ARGS)
	$(CMAKE) --build . -- -j$(COMPILER_CORE_COUNT)

ifeq ($(platform), android)
	mv $(TARGET_NAME)_libretro.so $(TARGET_NAME)_libretro_android.so
else ifeq ($(platform), win)
	mv $(TARGET_NAME)_libretro.so $(TARGET_NAME)_libretro.dll
else ifneq (,$(findstring ios,$(platform)))
	mv $(TARGET_NAME)_libretro.dylib $(TARGET_NAME)_libretro_ios.dylib
else ifeq ($(platform), libnx)
	ar -M <easyrpg_libretro_static.mri
	mv $(TARGET_NAME)_libretro_static.a $(TARGET_NAME)_libretro_$(platform).a
else ifeq ($(platform), vita)
	ar -M <easyrpg_libretro_static.mri
	mv $(TARGET_NAME)_libretro_static.a $(TARGET_NAME)_libretro_$(platform).a
endif

else
	$(CXX) $(LDFLAGS) $(fpic) $(SHARED) -o $@ $(OBJECTS) $(LIBS)
endif

clean:
	rm -f $(OBJECTS) $(TARGET) easyrpg_libs
	rm -rf CMakeCache.txt CMakeLists/
	rm -rf deps/libretro/icu-native
	rm -rf deps/libretro/lib
	rm -rf deps/libretro/include
	rm -f deps/libretro/config.cache

.PHONY: clean

